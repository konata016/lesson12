// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel CSMain
#pragma kernel Init
#pragma kernel Emit

struct Particle {
	int id;
	bool active;
	float3 pos;
	float3 rot;
	float scale;
	float4 color;
};

RWStructuredBuffer<Particle>_Particles;
float4 _Range;

float rand(float2 seed) {
	return frac(sin(dot(seed.xy, float2(12.9898, 78.233)))*43758.5453);
}
float3 rand3(float2 seed) {
	return 2.0*(float3(rand(seed * 1), rand(seed * 2), rand(seed * 3)) - 0.5);
}

float4 rand4(float2 seed) {
	return float4(rand(seed * 1), rand(seed * 2), rand(seed * 3), rand(seed * 4));
}

#define THREAD_NUM_X 32
[numthreads(THREAD_NUM_X,1,1)]
void Init(uint id:SV_DispatchThreadID) {
	float2 seed = float2(id + 1, id + 2);
	float3 pos = rand3(seed);
	float3 rot = rand3(seed + 3);
	float scale = rand(seed + 100) + 0.9 + 0.1;

	Particle p = _Particles[id];
	p.id = id;
	p.active = true;
	p.pos = pos * _Range.xyz;
	p.rot = rot * float3(0.1, 1, 0.1);
	p.scale = scale;
	p.color = rand4(seed);
	_Particles[id] = p;
}

[numthreads(THREAD_NUM_X, 1, 1)]
void Emit(uint id:SV_DispatchThreadID) {
	if (!_Particles[id].active)Init(id);
}
